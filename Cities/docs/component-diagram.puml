' @startuml Cities

' skinparam component {
'   BackgroundColor #FFFFFF
'   BorderColor #000000
'   ArrowColor #000000
' }

' !define SCREEN_SIZE 800x600

' package "Screens" {
'   [Cities] as cities
'   [AddCity] as addCity
'   [Locations] as locations
'   [AddLocation] as addLocation
'   [Info] as info
' }

' package "Context" {
'   [CitiesContext] as citiesContext
' }

' package "Navigation" {
'   [StackNavigator] as stackNavigator
' }

' package "Provider" {
'   [CitiesProvider] as citiesProvider
' }

' package "Test" {
'   [TestData] as testData
' }

' [cities] --> [locations]
' [cities] --> [addCity]
' [locations] --> [addLocation]
' [cities] --> [info]
' [addLocation] --> [citiesContext]
' [addCity] --> [citiesContext]
' [citiesProvider] --> [citiesContext]
' [stackNavigator] --> [citiesProvider]
' [stackNavigator] --> [cities]
' [stackNavigator] --> [addCity]
' [stackNavigator] --> [locations]
' [stackNavigator] --> [addLocation]
' [stackNavigator] --> [info]
' [testData] --> [citiesProvider]

' @enduml

@startuml

skinparam component {
    BackgroundColor FloralWhite
    BorderColor Black
    ArrowColor #707070
    ArrowThickness 1.5
}

package "App" {
    [App] as app
    [NavigationContainer] as navContainer
    [CitiesProvider] as citiesProvider
}

package "Screen Components" {
    [Cities] as citiesScreen
    [AddCity] as addCityScreen
    [Locations] as locationsScreen
    [AddLocation] as addLocationScreen
    [Info] as infoScreen
}

package "Context" {
    [CitiesContext] as citiesContext
}

package "Test Data" {
    [Test Cities] as testCities
    [Test Locations] as testLocations
}

app --> navContainer : Manages navigation
app --> citiesProvider : Accesses city data
citiesProvider --> citiesContext : Provides city data

navContainer --> citiesScreen : Navigates to cities screen
navContainer --> addCityScreen : Navigates to add city screen
navContainer --> locationsScreen : Navigates to locations screen
navContainer --> addLocationScreen : Navigates to add location screen
navContainer --> infoScreen : Navigates to info screen

citiesScreen --> citiesContext : Retrieves cities data
citiesScreen --> testCities : Uses test cities data
addCityScreen --> citiesContext : Adds new city
locationsScreen --> citiesContext : Retrieves Locations in selected City
locationsScreen --> testLocations : Uses test locations data
addLocationScreen --> citiesContext : Adds new location

@enduml

@startuml

!define ArrowColor #707070

skinparam component {
    BackgroundColor FloralWhite
    BorderColor Black
    ArrowColor ArrowColor
    ArrowThickness 1.5
}

package "App" {
    [App] as app
    [NavigationContainer] as navContainer
    [CitiesProvider] as citiesProvider
}

package "Screen Components" {
    [Cities] as citiesScreen
    [AddCity] as addCityScreen
    [Locations] as locationsScreen
    [AddLocation] as addLocationScreen
    [Info] as infoScreen
}

package "Context" {
    [CitiesContext] as citiesContext
}

package "Test Data" {
    [Test Cities] as testCities
    [Test Locations] as testLocations
}

app --> navContainer : Manages navigation
app --> citiesProvider : Accesses city data
app --> citiesScreen : Displays cities screen
app --> addCityScreen : Displays add city screen
app --> locationsScreen : Displays locations screen
app --> addLocationScreen : Displays add location screen
app --> infoScreen : Displays info screen

citiesScreen --> citiesContext : Retrieves cities data
citiesScreen --> testCities : Uses test cities data
addCityScreen --> citiesContext : Adds new city
locationsScreen --> citiesContext : Retrieves selected city
locationsScreen --> testLocations : Uses test locations data
addLocationScreen --> citiesContext : Adds new location

@enduml
